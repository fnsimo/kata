package com.trial.product.security;

import java.io.IOException;
import java.util.ArrayList;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.Claims;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtAuthenticationFilter extends OncePerRequestFilter {

	private final JwtService jwtService;

	public JwtAuthenticationFilter(JwtService jwtService) {
		this.jwtService = jwtService;
	}

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {

		// Extraire le token JWT de la requête HTTP
		String token = getJwtFromRequest(request);

		// Si le token est valide et non expiré, créer l'authentification
		if (token != null && !jwtService.isTokenExpired(token)) {
			Claims claims = jwtService.parseClaimsJwt(token);

			// Créer l'authentification avec les informations extraites du token (ici,
			// uniquement le username)
			UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
					claims.getSubject(), null, new ArrayList<>());

			// Ajouter cette authentification au contexte de sécurité
			SecurityContextHolder.getContext().setAuthentication(authentication);
		}

		// Passer la requête au filtre suivant dans la chaîne
		filterChain.doFilter(request, response);
	}

	// Méthode pour extraire le token JWT des en-têtes de la requête
	private String getJwtFromRequest(HttpServletRequest request) {
		String bearerToken = request.getHeader("Authorization");
		if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
			return bearerToken.substring(7); // Retirer le préfixe "Bearer "
		}
		return null;
	}
}
